* What is Functional Programming?
** Procedural and OOP
   Imperative - Telling the computer *how* to do things

   - in *Procedural* code, computations are performed by manipulating
     the values of variables

     - Examples: C

   - in the *Object Oriented* paradigm, computations are performed by
     calling object methods, causing *side-effects*

     - Examples: Java, Python, SmallTalk, C++

** Functional Programming
   *Declarative* - Telling the computer *what* to do

   - in *Functional* code, computations are performed by applying
     *functions* to arguments

     - Examples: Haskell!, Lisp, OCaml, ML
   
   - everything is a function!

     - even constants are functions!
       
*** The Rules
    - A function applied to the same arguments *must* always return
      the same value
      - No state!

    - Functions cannot alter their arguments
      - think: pass by value
      - No side-effects!
* Haskell
  Let's begin with... Hello World!
  
  #+BEGIN_SRC haskell :tangle Examples.hs

module Examples where

import qualified Data.Map as M

main :: IO ()
main = putStrLn "Hello World!"

  #+END_SRC
** Function Application

   Function application is performed simply with spaces

   #+BEGIN_SRC haskell :tangle Examples.hs
      
exciting :: String -> String
exciting string = string ++ "!"

mult :: Int -> Int -> Int
mult a b = a * b

hello = "Hello World"

printExcited thing = putStrLn ( exciting thing )

   #+END_SRC
** Pattern Matching and Recursion

   A common pattern in Haskell functions is to check for "base case"
   patterns, and perform recursion if they are not found

   #+BEGIN_SRC haskell :tangle Examples.hs

-- String is really just [Char]

aString :: String
aString = 'O':'h':' ':'h':'i':[]

reaction :: String -> String
reaction ('!':[]) = "I'm happy!"
reaction (a:as) = reaction as
reaction ([]) = "I'm sad..."

   #+END_SRC

* Functional Concepts
** Referential Transparency
   - A function cannot read external state to determine its return
     value

   - A function with the same arguments must return the same result

   - So, a function with arguments applied *is* its return value, as
     far as the program is concerned
     
** Lambda Expressions
   Functions defined on-the-fly

#+BEGIN_SRC haskell :tangle Examples.hs

useLamPlus :: Int -> String
useLamPlus v = (\x -> concat $ replicate 10 (show x)) v

#+END_SRC   
   
** Higher-Order Functions
   Functions are "First-Class" values -- they can be passed around
   just like anything else

   (Of course, they have to! Everything *is* a function!)

#+BEGIN_SRC haskell :tangle Examples.hs

useAnyLam :: (Int -> Int) -> Int -> Int
useAnyLam fun v = fun v

very :: (a -> a) -> (a -> a)
very fun = fun . fun

very' :: (a -> a) -> a -> a
very' fun a = fun (fun a)

#+END_SRC   

** Functors
   - a structure that can be mapped over
   
   - the contents can be transformed without altering the shape
     
#+BEGIN_SRC haskell :tangle Examples.hs

-- a couple Haskell examples: List and Maybe

mapList :: (a -> b) -> [a] -> [b]
mapList fun (a:as) = (fun a) : (mapList fun as)
mapList _ _ = []

data Maybe' a = Just' a | Nothing'

mapMaybe :: (a -> b) -> Maybe a -> Maybe b
mapMaybe = undefined

-- these functions are just different names for "fmap", the
-- function that defines Functor typeclass membership

#+END_SRC   

* Concepts specific to Haskell
** Type Safety
   Always be absolutely sure of type!

   Antithesis: "Duck Typing"

#+BEGIN_SRC haskell :tangle Examples.hs

-- Maybe represents failure

-- for example, Map lookups return values in the Maybe context

myMap :: M.Map String String
myMap = M.fromList [("Joe", "Pancakes"), ("Alice", "Waffles")]

#+END_SRC   

** Higher-Order Types

#+BEGIN_SRC haskell :tangle Examples.hs

-- Maps and Lists and Maybe are containers incomplete types

-- they require their contents to be defined in order to
-- be concrete

double :: a -> [a]
double thing = [thing, thing]

chair :: String
chair = "a nice chair"
#+END_SRC   

** Lazy Evaluation

   Here, 'primes' produces an infinite list of the prime numbers.

   How can that be used?  By evaluating lazily!

#+BEGIN_SRC haskell :tangle Examples.hs

  divis :: Int -> Int -> Bool
  divis a b = (==0) $ mod a b

  isPrime :: Int -> Bool
  isPrime a = testPrime a primes


  primes :: [Int]
  primes = 2 : (r 3 [2]) where
      -- Recursive helper function
      r :: Int -> [Int] -> [Int]
      r a ps =
          if testPrime a ps 
          -- Add 'a' to the list of primes and the checklist
          then let rest = r (a+2) (ps++[a]) in a : rest
          -- Forget 'a' and move on to the next number
          else r (a+2) ps

  testPrime :: Int -> [Int] -> Bool
  testPrime a ps = not . or . fmap (divis a) $ (candidates a ps)

  -- Values that need to be checked for divisibility
  candidates :: Int -> [Int] -> [Int]
  candidates a = takeWhile $ (<=a) . (^2)


  largestPF :: [Int] -> Int -> Int
  largestPF (p:ps) u
      | p == u = p
      | divis u p = largestPF (p:ps) (quot u p)
      | otherwise = largestPF ps u

#+END_SRC   

** Currying

   Technically, functions only take *one argument*.

   A function that seems to take two arguments is really a function
   that takes one argument and returns another function that takes one
   argument.

#+BEGIN_SRC haskell :tangle Examples.hs

addThreeInts :: ( Int -> ( Int -> ( Int -> ( Int ) ) ) )
addThreeInts a b c = a + b + c

addTwoIntsToFive :: Int -> Int -> Int
addTwoIntsToFive a b = addThreeInts 5 a b

itsJustSeven :: Int
itsJustSeven = addTwoIntsToFive 2 0 

#+END_SRC   

** The IO Monad
   Didn't get to this...
* Resources
  - Functional Programming
    - *Structure and Interpretation of Computer Programs*
      - http://mitpress.mit.edu/sicp/full-text/book/book.html
      
  - Haskell
    - *Learn You a Haskell for Great Good!*
      - http://learnyouahaskell.com/chapters
    - *Real World Haskell*
      - http://book.realworldhaskell.org/read/

  - Also see this presentation's source org-mode file on Github!
    - https://github.com/RoboNickBot/functional-programming-talk
    - (The Haskell code in this org file can be extracted into a valid
      =.hs= file for compilation by running ~M-x org-babel-tangle~ in
      Emacs)
